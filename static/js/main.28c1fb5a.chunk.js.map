{"version":3,"sources":["Map.js","MapDebug.js","App.js","serviceWorker.js","index.js"],"names":["Map","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","container","React","createRef","makeMarkerClickHandler","point","props","history","push","id","target","OpenSeadragon","Point","x","y","viewer","viewport","zoomTo","panTo","generateOverlays","size","fill","map","_","i","pointOptions","Math","random","placement","Placement","CENTER","locationMarker","react_default","a","createElement","LocationOn_default","style","fontSize","color","yellow","cursor","onClick","locationMarkerContainer","document","ReactDOM","render","objectSpread","element","inherits","createClass","key","value","current","prefixUrl","process","tileSources","overlays","zoomPerClick","Fragment","Typography_default","variant","ref","height","width","Component","MapDebug","index_es","App","CssBaseline_default","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28c1fb5a.chunk.js","sourcesContent":["import {yellow} from '@material-ui/core/colors'\nimport Typography from '@material-ui/core/Typography/Typography'\nimport React, {Component} from 'react'\nimport ReactDOM from 'react-dom'\nimport OpenSeadragon from 'openseadragon'\nimport LocationOn from '@material-ui/icons/LocationOn'\n\n\nexport class Map extends Component {\n  container = React.createRef()\n\n  componentDidMount() {\n    this.viewer = OpenSeadragon({\n      element: this.container.current,\n      prefixUrl: `${process.env.PUBLIC_URL}/tiles_files/`,\n      tileSources: `${process.env.PUBLIC_URL}/tiles.dzi`,\n      overlays: this.generateOverlays(10),\n      zoomPerClick: 1, // disable zoom on click\n    })\n  }\n\n  makeMarkerClickHandler = (point) => () => {\n    this.props.history.push(point.id)\n    const target = new OpenSeadragon.Point(point.x, point.y)\n    this.viewer.viewport.zoomTo(3, target)\n    this.viewer.viewport.panTo(target)\n  }\n\n  generateOverlays = (size) => {\n    return Array(size).fill(0).map((_, i) => {\n\n      const id = `location-marker-${i}`\n      const pointOptions = {\n        id,\n        x: (Math.random() * 0.8) + 0.2,\n        y: (Math.random() * 0.5),\n        placement: OpenSeadragon.Placement.CENTER,\n      }\n\n      const locationMarker = <LocationOn\n        id={id}\n        style={{fontSize: '2em', color: yellow[400], cursor: 'pointer'}}\n        onClick={this.makeMarkerClickHandler(pointOptions)}\n      />\n\n      const locationMarkerContainer = document.createElement('div')\n      ReactDOM.render(locationMarker, locationMarkerContainer)\n      return ({\n        ...pointOptions,\n        element: locationMarkerContainer,\n      })\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <Typography variant={'h2'}>Amerasia Map</Typography>\n        <div ref={this.container} id={'test'} style={{height: '80vh', width: '100vw'}}/>\n      </>\n    )\n  }\n}\n\n","import {Typography} from '@material-ui/core'\nimport React, {Component} from 'react'\n\nexport class MapDebug extends Component {\n  render() {\n    return (\n      <>\n        <Typography variant={'h2'}>Amerasia Map</Typography>\n        <Typography variant={'subtitle1'}>Debug Mode</Typography>\n      </>\n    )\n  }\n}\n","import CssBaseline from '@material-ui/core/CssBaseline'\nimport React, {Component} from 'react'\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport {Map} from './Map'\nimport {MapDebug} from './MapDebug'\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <CssBaseline />\n        <BrowserRouter>\n          <Switch>\n            <Route exact path={'/'} component={Map} />\n            {/*TODO: fix*/}\n            <Route path={'/:id'} component={Map} />\n            <Route exact path={'/debug'} component={MapDebug} />\n          </Switch>\n        </BrowserRouter>\n      </>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}